# NumPy Basics

```{python}
import numpy as np

# set seed
np.random.seed(42)
```

Let's take a break and learn some NumPy basics.


## Create Array

Let's start with the functions we have been using.

Turn a list into an array:

```{python}
np.array([[1, 2], [3, 4]])
```

Generate a sequence of numbers:

```{python}
np.arange(1, 10, 2)
```

Create an array of random numbers from the standard normal distribution:

```{python}
np.random.randn(2, 3, 4)
```

Create an array of zeros:

```{python}
np.zeros(3)
```

```{python}
np.zeros_like(np.random.randn(2, 3))
```


## Data Types

The data type of NumPy arrays in Python: 

```{python}
type(np.random.randn(2, 3))
```

ndarray is short for n-dimensional array.

NumPy data types:

```{python}
np.random.randn(2, 3).dtype
```

```{python}
np.array([1, 2]).dtype
```


## Array Structure

```{python}
a = np.random.randn(2, 3, 4)
```

```{python}
a.ndim
```

```{python}
a.shape
```


## Arithmetic Operations

```{python}
A = np.array([[1, 2], [3, 4]])
B = np.array([[-1, -2], [-3, -4]])
x = np.array([1, 2])
```

Element-wise operations:

```{python}
A + B
```

```{python}
A * B
```

Broadcast:

```{python}
A * x
```


## Matrix Multiplication

```{python}
x = np.array([1, 2])
W = np.array([[1, 2, 3], [2, 3, 4]])
np.dot(x, W)
```

For batch:

```{python}
xs = np.array([[1, 2], [-1, -2]])
np.dot(xs, W)
```

Note that the input to a neural network is usually a batch. The implementation of the batch version of some functions may be different. For example, below is the function calculating the sum of a vector:

```{python}
np.sum(x)
```

You can not just apply it to a batch of vectors:

```{python}
np.sum(xs)
```

Instead, you should use:

```{python}
np.sum(xs, axis=1, keepdims=True)
```


## Reshape

```{python}
a = np.array([[1, 2], [3, 4]])
a
```

```{python}
a.reshape((4, 1))
```

```{python}
a.reshape((1, 4))
```
