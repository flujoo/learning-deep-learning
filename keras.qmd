# Keras

```{python}
from tensorflow.keras.datasets import mnist
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense
```

Keras is a high-level language built on the top of TensorFlow.

Let's try it on MNIST.

The following code is quite self-explanatory. Check <https://keras.io/api/models/model_training_apis/> for more details.

Prepare data:

```{python}
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

train_images = train_images.reshape((60000, 28 * 28))
train_images = train_images.astype("float32") / 255
test_images = test_images.reshape((10000, 28 * 28))
test_images = test_images.astype("float32") / 255
```

Build a model:

```{python}
model = Sequential([
  Dense(512, activation="relu"),
  Dense(10, activation="softmax")
])
```

```{python}
model.compile(
  optimizer="rmsprop",
  loss="sparse_categorical_crossentropy",
  metrics=["accuracy"]
)
```

Train the model:

```{python}
history = model.fit(
  train_images,
  train_labels,
  epochs=5,
  batch_size=128,
  verbose=0
)
```

```{python}
history.history
```

Evaluate the model on the validation data:

```{python}
model.evaluate(
  test_images,
  test_labels,
  verbose=0
)
```

Use the model:

```{python}
model.predict(test_images[0:2]).argmax(axis=-1)
```

```{python}
test_labels[0:2]
```
